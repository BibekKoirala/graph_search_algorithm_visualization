{"version":3,"sources":["Components/DataStructures/CommonFunc.js","Components/Unit.js","Components/DataStructures/Queue.js","Components/DataStructures/BFS.js","Components/DataStructures/Stack.js","Components/DataStructures/DFS.js","Components/DialogPop.js","Components/DataStructures/PriorityQueue.js","Components/DataStructures/A_Star.js","Components/Stats.js","Components/Layout.js","Components/Navbar.js","Components/Options.js","Components/Instructions.js","Components/Root.js","App.js","reportWebVitals.js","index.js"],"names":["arrayContains","main","sub","i","length","k","equals","a","b","JSON","stringify","possiblePaths","node","gridSize","block","trav","possiblePath","push","filter","Unit","props","wall","setStart","setEnd","setBlock","start","end","gridType","position","path","setStat","allStat","BFS","DFS","_jsx","onClick","blk","alert","style","color","backgroundColor","paddingRight","border","borderColor","boxSizing","borderWidth","_Queue","constructor","head","arguments","undefined","this","enqueue","current","next","dequeue","item","Error","isEmpty","contains","data","printQueue","console","log","_ListNode","prev","async","stop","Start","ListNode","queue","Queue","travNode","forEach","lastNode","Trav","Path","_Stack","pop","stack","Stack","top","Transition","React","forwardRef","ref","Slide","direction","DialogPop","open","setOpen","handleClose","_jsxs","Dialog","TransitionComponent","keepMounted","onClose","children","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","_Node","priority","_PriorityQueue","temp","distance","Math","abs","A_Star","Node","PQueue","newNode","useStyles","makeStyles","table","minWidth","Stats","_ref","searchStat","classes","Grid","container","marginTop","TableContainer","component","Paper","Table","className","TableHead","TableRow","TableCell","align","TableBody","scope","Layout","useState","setTrav","setPath","found","setFound","justify","marginBottom","disabled","algorithm","gridShape","then","j","intr","setInterval","slice","clearInterval","pathIntr","animTime","_ref2","_ref3","PerformSearch","PlayArrowIcon","ResetAll","marginLeft","RotateLeftIcon","makeGrid","grid","row","elevation","Navbar","handleOpenInstructions","AppBar","Toolbar","display","justifyContent","Typography","fontWeight","variant","IconButton","edge","InfoIcon","Options","margin","textAlign","padding","alignItems","FormControl","InputLabel","Select","labelId","value","onChange","e","setAlgorithm","target","algorithms","map","algo","index","MenuItem","setGridType","gridTypes","Slider","newValue","setAnim","valueLabelDisplay","step","marks","min","max","setGrid","inputProps","name","gridShapes","Instructions","maxWidth","fullWidth","autoFocus","Root","instructionsOpen","setInstructionsOpen","animTimes","includes","handleCloseInstructions","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b3c54f12.chunk.js","sourcesContent":["export const arrayContains = (main, sub) => {\n  let i = main.length;\n  for (let k = 0; k < i; k++) {\n    if (main[k][0] === sub[0] && main[k][1] === sub[1]) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexport const equals = (a, b) => JSON.stringify(a) === JSON.stringify(b);\n\nexport const possiblePaths = (node, gridSize, block, trav) => {\n  let possiblePath = [];\n\n  if (node[0] > 2) {\n    possiblePath.push([node[0] - 1, node[1]]);\n  }\n  if (node[0] < gridSize - 1) {\n    possiblePath.push([node[0] + 1, node[1]]);\n  }\n  if (node[1] > 2) {\n    possiblePath.push([node[0], node[1] - 1]);\n  }\n  if (node[1] < gridSize - 1) {\n    possiblePath.push([node[0], node[1] + 1]);\n  }\n  possiblePath = possiblePath.filter((sub) => {\n    return !arrayContains(block, sub);\n  });\n  possiblePath = possiblePath.filter((sub) => {\n    return !arrayContains(trav, sub);\n  });\n  return possiblePath;\n};\n","import React from \"react\";\nimport { equals, arrayContains } from \"./DataStructures/CommonFunc\";\n\nfunction Unit(props) {\n  const {\n    wall,\n    setStart,\n    setEnd,\n    setBlock,\n    start,\n    end,\n    block,\n    gridType,\n    trav,\n    position,\n    path,\n    setStat,\n  } = props;\n\n  const allStat = {\n    BFS: {\n      trav: 0,\n      path: 0,\n    },\n    DFS: {\n      trav: 0,\n      path: 0,\n    },\n    \"A*\": {\n      trav: 0,\n      path: 0,\n    },\n  };\n\n  return (\n    <span\n      onClick={\n        !props.wall\n          ? () => {\n              setStat(allStat);\n              if (gridType === \"Block\") {\n                if (arrayContains(block, props.position)) {\n                  setBlock(\n                    block.filter((blk) => {\n                      return !equals(blk, position);\n                    })\n                  );\n                } else if (equals(start, props.position)) {\n                  alert(\"Hey its start node already\");\n                } else if (equals(end, props.position)) {\n                  alert(\"Hey its end node already\");\n                } else {\n                  setBlock([...block, position]);\n                }\n              } else if (gridType === \"Start\") {\n                if (arrayContains(block, props.position)) {\n                  alert(\"Hey its start node already\");\n                } else if (equals(end, props.position)) {\n                  alert(\"Hey its end node already\");\n                } else {\n                  setStart(position);\n                }\n              } else if (gridType === \"Stop\") {\n                if (arrayContains(block, props.position)) {\n                  alert(\"Hey its start node already\");\n                } else if (equals(start, props.position)) {\n                  alert(\"Hey its start node already\");\n                } else {\n                  setEnd(position);\n                }\n              } else {\n              }\n              // console.log(position)\n            }\n          : null\n      }\n      style={{\n        position: \"relative\",\n        color: \"gray\",\n\n        backgroundColor: wall\n          ? \"blanchedalmond\"\n          : arrayContains(block, position)\n          ? \"green\"\n          : start && start[0] === position[0] && start[1] === position[1]\n          ? \"red\"\n          : end && end[0] === position[0] && end[1] === position[1]\n          ? \"orange\"\n          : arrayContains(path, position)\n          ? \"black\"\n          : arrayContains(trav, position)\n          ? \"purple\"\n          : \"turquoise\",\n\n        paddingRight: 10,\n        border: \"solid\",\n        borderColor: \"black\",\n        boxSizing: \"border-box\",\n        borderWidth: 1,\n      }}\n      color=\"gray\"\n    ></span>\n  );\n}\n\nexport default Unit;\n","import { equals } from \"./CommonFunc\";\n\nclass ListNode {\n  constructor(data, prev = null) {\n    this.data = data;\n    this.next = null;\n    this.prev = prev;\n  }\n}\n\nclass Queue {\n  constructor(head = null) {\n    this.head = head;\n  }\n\n  enqueue(node) {\n    if (this.head === null) {\n      this.head = node;\n    } else {\n      let current = this.head;\n      while (current.next !== null) {\n        current = current.next;\n      }\n      current.next = node;\n    }\n  }\n\n  dequeue() {\n    let item = null;\n    if (this.head !== null) {\n      item = this.head;\n      this.head = this.head.next;\n    } else {\n      const error = new Error(\"No Element To Perform This Operation\");\n      throw error;\n    }\n    return item;\n  }\n\n  isEmpty() {\n    if (this.head === null) {\n      return true;\n    }\n    return false;\n  }\n\n  contains(path) {\n    let trav = this.head;\n    while (trav !== null) {\n      if (equals(trav.data, path)) {\n        return true;\n      }\n      trav = trav.next;\n    }\n    return false;\n  }\n\n  printQueue() {\n    let current = this.head;\n    while (current !== null) {\n      console.log(current.data);\n      current = current.next;\n    }\n  }\n}\n\nconst _Queue = Queue;\nexport { _Queue as Queue };\n\nconst _ListNode = ListNode;\nexport { _ListNode as ListNode };\n","import { Queue, ListNode } from \"./Queue\";\nimport { equals, possiblePaths } from \"./CommonFunc\";\n\nasync function BFS(start, stop, block, gridSize) {\n  if (equals(start, stop)) {\n    return true;\n  } else {\n    let Start = new ListNode(start);\n    let queue = new Queue(Start);\n\n    let head = [];\n    let trav = [];\n    let travNode = [];\n\n    while (!equals(head.data, stop) || queue.isEmpty()) {\n      try {\n        head = queue.dequeue();\n      } catch {\n        break;\n      }\n\n      trav.push(head.data);\n      travNode.push(head);\n\n      possiblePaths(head.data, gridSize, block, trav).forEach((path) => {\n        if (!queue.contains(path)) {\n          queue.enqueue(new ListNode(path, head));\n        }\n      });\n    }\n\n    let path = [];\n    let lastNode = travNode[travNode.length - 1];\n    while (lastNode.prev !== null) {\n      path.push(lastNode.prev.data);\n      lastNode = lastNode.prev;\n    }\n    return { Trav: trav, Path: path };\n  }\n}\n\nexport default BFS;\n","import { equals } from \"./CommonFunc\";\n\nclass Stack {\n  constructor(head = null) {\n    this.head = head;\n  }\n\n  push(node) {\n    if (this.head === null) {\n      this.head = node;\n    } else {\n      let trav = this.head;\n      while (trav.next !== null) {\n        trav = trav.next;\n      }\n      trav.next = node;\n    }\n  }\n\n  pop() {\n    let item = null;\n    if (this.head === null) {\n      throw new Error(\"No item in stack to pop\");\n    } else if (this.head.next === null) {\n      item = this.head;\n      this.head = null;\n    } else {\n      let trav = this.head;\n      while (trav.next.next !== null) {\n        trav = trav.next;\n      }\n      item = trav.next;\n      trav.next = null;\n    }\n    return item;\n  }\n\n  isEmpty() {\n    if (this.head === null) {\n      return true;\n    }\n    return false;\n  }\n\n  contains(path) {\n    let trav = this.head;\n    while (trav !== null) {\n      if (equals(trav.data, path)) {\n        return true;\n      }\n      trav = trav.next;\n    }\n    return false;\n  }\n}\n\nconst _Stack = Stack;\nexport { _Stack as Stack };\n","import { ListNode } from \"./Queue\";\nimport { Stack } from \"./Stack\";\nimport { equals, possiblePaths } from \"./CommonFunc\";\n\nasync function DFS(start, stop, block, gridSize) {\n  if (equals(start, stop)) {\n    return true;\n  } else {\n    let Start = new ListNode(start);\n    let stack = new Stack(Start);\n\n    let top = [];\n    let trav = [];\n    let travNode = [];\n\n    while (!equals(top.data, stop) || stack.isEmpty()) {\n      try {\n        top = stack.pop();\n      } catch {\n        break;\n      }\n      trav.push(top.data);\n      travNode.push(top);\n\n      possiblePaths(top.data, gridSize, block, trav).forEach((path) => {\n        if (!stack.contains(path)) {\n          stack.push(new ListNode(path, top));\n        }\n      });\n    }\n\n    let path = [];\n    let lastNode = travNode[travNode.length - 1];\n    while (lastNode.prev !== null) {\n      path.push(lastNode.prev.data);\n      lastNode = lastNode.prev;\n    }\n    return { Trav: trav, Path: path };\n  }\n}\n\nexport default DFS;\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Slide from \"@material-ui/core/Slide\";\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nfunction DialogPop(props) {\n  const { open, setOpen } = props;\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <Dialog\n      open={open}\n      TransitionComponent={Transition}\n      keepMounted\n      onClose={handleClose}\n      aria-labelledby=\"alert-dialog-slide-title\"\n      aria-describedby=\"alert-dialog-slide-description\"\n    >\n      <DialogTitle id=\"alert-dialog-slide-title\">Path Error</DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-slide-description\">\n          Sorry No Path Could Be Detected\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose} color=\"primary\">\n          Ok\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default DialogPop;\n","import { equals } from \"./CommonFunc\";\n\nclass Node {\n  constructor(data, priority, prev = null) {\n    this.data = data;\n    this.priority = priority;\n    this.next = null;\n    this.prev = prev;\n  }\n}\n\nclass PriorityQueue {\n  constructor(head = null) {\n    this.head = head;\n  }\n\n  enqueue(node) {\n    if (this.head === null) {\n      this.head = node;\n    } else if (this.head.next === null) {\n      if (this.head.priority < node.priority) {\n        this.head.next = node;\n      } else {\n        let temp = this.head;\n        this.head = node;\n        this.head.next = temp;\n      }\n    } else if (this.head.priority > node.priority) {\n      let temp = this.head;\n      this.head = node;\n      this.head.next = temp;\n    } else {\n      let trav = this.head;\n\n      while (true) {\n        if (trav.next === null) {\n          if (trav.priority < node.priority) {\n            trav.next = node;\n            break;\n          } else {\n            let temp = trav;\n            trav = node;\n            trav.next = temp;\n            break;\n          }\n        } else if (trav.next.priority > node.priority) {\n          let temp = trav.next;\n          trav.next = node;\n          trav.next.next = temp;\n          break;\n        }\n        trav = trav.next;\n      }\n    }\n  }\n\n  dequeue() {\n    let item = null;\n    if (this.head !== null) {\n      item = this.head;\n      this.head = this.head.next;\n    } else {\n      const error = new Error(\"No Element To Perform This Operation\");\n      throw error;\n    }\n    return item;\n  }\n\n  isEmpty() {\n    if (this.head === null) {\n      return true;\n    }\n    return false;\n  }\n\n  contains(path) {\n    let trav = this.head;\n    while (trav !== null) {\n      if (equals(trav.data, path)) {\n        return true;\n      }\n      trav = trav.next;\n    }\n    return false;\n  }\n}\n\nconst _Node = Node;\nexport { _Node as Node };\n\nconst _PriorityQueue = PriorityQueue;\nexport { _PriorityQueue as PQueue };\n","import { Node, PQueue } from \"./PriorityQueue\";\n\nimport { equals, possiblePaths } from \"./CommonFunc\";\n\nfunction distance(a, b) {\n  return Math.abs(a[0] - b[0]) + Math.abs(a[1] - b[1]);\n}\n\nasync function A_Star(start, stop, block, gridSize) {\n  if (equals(start, stop)) {\n    return true;\n  } else {\n    let Start = new Node(start, distance(start, stop));\n    let queue = new PQueue(Start);\n\n    let head = [];\n    let trav = [];\n    let travNode = [];\n\n    let temp = true;\n    while (!equals(head.data, stop) || queue.isEmpty()) {\n      if (temp) {\n        head = queue.dequeue();\n        temp = false;\n      }\n      possiblePaths(head.data, gridSize, block, trav).forEach((path) => {\n        if (!queue.contains(path)) {\n          let newNode = new Node(path, distance(path, stop), head);\n          queue.enqueue(newNode);\n          trav.push(path);\n          travNode.push(newNode);\n        }\n      });\n\n      try {\n        head = queue.dequeue();\n      } catch {\n        break;\n      }\n    }\n\n    let path = [];\n    let lastNode = travNode[travNode.length - 1];\n    console.log(lastNode);\n    while (lastNode.prev !== null) {\n      console.log(lastNode.prev);\n      path.push(lastNode.prev.data);\n      lastNode = lastNode.prev;\n    }\n    return { Trav: trav, Path: path };\n  }\n}\n\nexport default A_Star;\n","import { Button, Grid } from \"@material-ui/core\";\nimport React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nfunction Stats({ searchStat }) {\n  const classes = useStyles();\n\n  return (\n    <Grid container style={{ marginTop: 50 }}>\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Algorithm</TableCell>\n              <TableCell align=\"right\">Traversed Nodes</TableCell>\n              <TableCell align=\"right\">Path Length</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            <TableRow>\n              <TableCell component=\"th\" scope=\"row\">\n                Breadth First Search\n              </TableCell>\n              <TableCell align=\"right\">{searchStat[\"BFS\"].trav}</TableCell>\n              <TableCell align=\"right\">{searchStat[\"BFS\"].path}</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell component=\"th\" scope=\"row\">\n                Depth First Search\n              </TableCell>\n              <TableCell align=\"right\">{searchStat[\"DFS\"].trav}</TableCell>\n              <TableCell align=\"right\">{searchStat[\"DFS\"].path}</TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell component=\"th\" scope=\"row\">\n                A Star\n              </TableCell>\n              <TableCell align=\"right\">{searchStat[\"A*\"].trav}</TableCell>\n              <TableCell align=\"right\">{searchStat[\"A*\"].path}</TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Grid>\n  );\n}\n\nexport default Stats;\n","import { Button, Grid, Paper } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport Unit from \"./Unit\";\nimport BFS from \"./DataStructures/BFS\";\nimport DFS from \"./DataStructures/DFS\";\nimport DialogPop from \"./DialogPop\";\nimport A_Star from \"./DataStructures/A_Star\";\nimport { equals } from \"./DataStructures/CommonFunc\";\nimport Stats from \"./Stats\";\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\nimport RotateLeftIcon from \"@material-ui/icons/RotateLeft\";\n\nfunction Layout(props) {\n  const allStat = {\n    BFS: {\n      trav: 0,\n      path: 0,\n    },\n    DFS: {\n      trav: 0,\n      path: 0,\n    },\n    \"A*\": {\n      trav: 0,\n      path: 0,\n    },\n  };\n  const [start, setStart] = useState(null);\n  const [end, setEnd] = useState(null);\n  const [block, setBlock] = useState([]);\n  const [trav, setTrav] = useState([]);\n  const [path, setPath] = useState([]);\n  const [found, setFound] = useState(false);\n  const [searchStat, setStat] = useState(allStat);\n\n  const ResetAll = async () => {\n    setStart(null);\n    setEnd(null);\n    setBlock([]);\n    setTrav([]);\n    setPath([]);\n    setStat(allStat);\n  };\n\n  const PerformSearch = async () => {\n    setTrav([]);\n    setPath([]);\n    if (props.algorithm === \"BFS\") {\n      console.log(\"Performing BFS\");\n      BFS(start, end, block, props.gridShape).then(async ({ Trav, Path }) => {\n        let i = 0;\n        let j = 0;\n\n        var intr = setInterval(() => {\n          i++;\n          setTrav(Trav.slice(0, i));\n          if (i > Trav.length - 1) {\n            clearInterval(intr);\n            if (!equals(end, Trav[Trav.length - 1])) {\n              console.log(\"Not found\");\n              setFound(true);\n            } else {\n              let temp = searchStat;\n              temp[\"BFS\"].trav = Trav.length - 1;\n              temp[\"BFS\"].path = Path.length;\n              setStat(temp);\n              var pathIntr = setInterval(() => {\n                j++;\n                setPath(Path.slice(0, i));\n                if (j > Path.length - 1) {\n                  clearInterval(pathIntr);\n                }\n              }, props.animTime);\n            }\n          }\n        }, props.animTime);\n      });\n    } else if (props.algorithm === \"DFS\") {\n      console.log(\"Performing DFS\");\n      DFS(start, end, block, props.gridShape).then(async ({ Trav, Path }) => {\n        let i = 0;\n        var intr = setInterval(() => {\n          i++;\n          setTrav(Trav.slice(0, i));\n          if (i > Trav.length - 1) {\n            clearInterval(intr);\n            if (!equals(end, Trav[Trav.length - 1])) {\n              console.log(\"Not found\");\n              setFound(true);\n            } else {\n              let temp = searchStat;\n              temp[\"DFS\"].trav = Trav.length - 1;\n              temp[\"DFS\"].path = Path.length;\n              setStat(temp);\n              var pathIntr = setInterval(() => {\n                i++;\n                setPath(Path.slice(0, i));\n                if (i > Path.length - 1) {\n                  clearInterval(pathIntr);\n                }\n              }, props.animTime);\n            }\n          }\n        }, props.animTime);\n      });\n    } else if (props.algorithm === \"A*\") {\n      console.log(\"Performing A*\");\n      A_Star(start, end, block, props.gridShape).then(\n        async ({ Trav, Path }) => {\n          let i = 0;\n          var intr = setInterval(() => {\n            i++;\n            setTrav(Trav.slice(0, i));\n            if (i > Trav.length - 1) {\n              clearInterval(intr);\n              if (!equals(end, Trav[Trav.length - 1])) {\n                console.log(\"Not found\");\n                setFound(true);\n              } else {\n                let temp = searchStat;\n                temp[\"A*\"].trav = Trav.length - 1;\n                temp[\"A*\"].path = Path.length;\n                setStat(temp);\n                var pathIntr = setInterval(() => {\n                  i++;\n                  setPath(Path.slice(0, i));\n                  if (i > Path.length - 1) {\n                    clearInterval(pathIntr);\n                  }\n                }, props.animTime);\n              }\n            }\n          }, props.animTime);\n        }\n      );\n    }\n  };\n\n  const makeGrid = () => {\n    let grid = [];\n    let k = 1000;\n    let row = [];\n\n    for (let i = 1; i <= props.gridShape; i++) {\n      for (let j = 1; j <= props.gridShape; j++) {\n        grid.push(\n          <Unit\n            key={k}\n            wall={\n              i === 1 ||\n              j === 1 ||\n              i === props.gridShape ||\n              j === props.gridShape\n                ? true\n                : false\n            }\n            setStart={setStart}\n            setEnd={setEnd}\n            setBlock={setBlock}\n            start={start}\n            end={end}\n            block={block}\n            gridType={props.gridType}\n            trav={trav}\n            position={[i, j]}\n            path={path}\n            setStat={setStat}\n          />\n        );\n        k++;\n      }\n      row.push(\n        <div\n          key={i}\n          style={{\n            position: \"relative\",\n            boxSizing: \"border-box\",\n          }}\n        >\n          {grid}\n        </div>\n      );\n      grid = [];\n    }\n    return row;\n  };\n\n  return (\n    <div>\n      <div>\n        <DialogPop open={found} setOpen={setFound} />\n      </div>\n\n      <Grid container direction=\"row\" justify=\"space-around\">\n        <div>\n          <Button\n            color=\"primary\"\n            style={{ backgroundColor: \"salmon\", marginBottom: 10 }}\n            disabled={start === null || end === null ? true : false}\n            onClick={() => PerformSearch()}\n          >\n            Start Search <PlayArrowIcon />\n          </Button>\n          <Button\n            onClick={() => ResetAll()}\n            style={{\n              backgroundColor: \"antiquewhite\",\n              marginBottom: 10,\n              marginLeft: 10,\n            }}\n          >\n            Reset <RotateLeftIcon />\n          </Button>\n          {makeGrid()}\n        </div>\n        <div>\n          <Paper elevation={5}>\n            <Stats searchStat={searchStat} />\n          </Paper>\n        </div>\n      </Grid>\n    </div>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { AppBar, Toolbar, Typography, IconButton } from \"@material-ui/core\";\nimport InfoIcon from '@material-ui/icons/Info';\n\nfunction Navbar({ handleOpenInstructions }) {\n  return (\n    <div>\n      <AppBar color=\"primary\" position=\"sticky\">\n        <Toolbar style={{ display: 'flex', justifyContent: 'space-between' }}>\n          <Typography style={{ fontWeight: \"bold\" }} variant=\"h6\">\n            Graph Search Algorithms Visualization\n          </Typography>\n          <IconButton edge=\"end\" color=\"inherit\" onClick={handleOpenInstructions}>\n            <InfoIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport {\n  Grid,\n  Paper,\n  Select,\n  Typography,\n  InputLabel,\n  FormControl,\n  MenuItem,\n  Slider\n} from \"@material-ui/core\";\n\nfunction Options(props) {\n  return (\n    <Paper\n      style={{ margin: 10, backgroundColor: \"aliceblue\" }}\n      variant=\"outlined\"\n      elevation={5}\n    >\n      <Typography\n        variant=\"h4\"\n        style={{ textAlign: \"center\", margin: \"10px\", fontWeight: \"bold`\" }}\n      >\n        Options\n      </Typography>\n\n      {/* <h2>Graph Search Algorithm Visualization Instructions</h2> */}\n      \n\n      <Grid\n        container\n        style={{ padding: 20 }}\n        alignItems=\"center\"\n        justify=\"space-around\"\n      >\n        <FormControl style={{ minWidth: 120 }}>\n          <InputLabel id=\"algo-select-id\">Algorithm</InputLabel>\n          <Select\n            labelId=\"algo-select-id\"\n            value={props.algorithm}\n            id=\"algo-select\"\n            onChange={(e) => props.setAlgorithm(e.target.value)}\n          >\n            {props.algorithms.map((algo, index) => {\n              return (\n                <MenuItem key={index} value={algo}>\n                  {\" \"}\n                  {algo}\n                </MenuItem>\n              );\n            })}\n          </Select>\n        </FormControl>\n\n        <FormControl style={{ minWidth: 120 }}>\n          <InputLabel id=\"gridtype-select-id\">GridType</InputLabel>\n          <Select\n            value={props.gridType}\n            labelId=\"gridtype-select-id\"\n            id=\"gridtype-select\"\n            onChange={(e) => props.setGridType(e.target.value)}\n          >\n            {props.gridTypes.map((algo, index) => {\n              return (\n                <MenuItem key={index} value={algo}>\n                  {\" \"}\n                  {algo}\n                </MenuItem>\n              );\n            })}\n          </Select>\n        </FormControl>\n\n        <FormControl style={{ minWidth: 120 }}>\n        <InputLabel id=\"anim-slider-label\">Animation Time ( {props.animTime} ms)</InputLabel>\n        <Slider\n          value={props.animTime}\n          onChange={(e, newValue)=> props.setAnim(newValue)}\n          aria-labelledby=\"anim-slider-label\"\n          valueLabelDisplay=\"auto\"\n          step={50} // Adjust as needed\n          marks // Display marks on the slider\n          min={0} // Adjust minimum value\n          max={500} // Adjust maximum value\n        />\n      \n      </FormControl>\n\n        <FormControl style={{ minWidth: 120 }}>\n          <InputLabel id=\"gridsize-select-id\">GridSize</InputLabel>\n          <Select\n            value={props.gridShape}\n            onChange={(e) => props.setGrid(e.target.value)}\n            inputProps={{\n              name: \"gridsize\",\n              id: \"grid-select\",\n            }}\n          >\n            {props.gridShapes.map((algo, index) => {\n              return (\n                <MenuItem key={index} value={algo}>\n                  {\" \"}\n                  {algo}\n                </MenuItem>\n              );\n            })}\n          </Select>\n        </FormControl>\n      </Grid>\n    </Paper>\n  );\n}\n\nexport default Options;\n","import React from 'react';\nimport { Dialog, DialogTitle, DialogContent, Button } from '@material-ui/core';\n\nconst Instructions = ({ open, handleClose }) => {\n  return (\n    <Dialog open={open} onClose={handleClose} maxWidth=\"md\" fullWidth >\n      <DialogTitle >Instructions for Using the Graph Search Algorithms Visualization</DialogTitle>\n      <DialogContent>\n          <h4>1. Select the Algorithm</h4>\n          <div>\n            Use the dropdown menu labeled \"Algorithm\" to choose the search algorithm you want to visualize. The available options are:\n            <ul>\n              <li><strong>Breadth First Search (BFS)</strong></li>\n              <li><strong>Depth First Search (DFS)</strong></li>\n              <li><strong>A Star (A*)</strong></li>\n            </ul>\n          </div>\n          <h4>2. Set the Grid Type</h4>\n          <div>\n            Choose the type of grid you want to use from the \"GridType\" dropdown. The options are:\n            <ul>\n              <li><strong>Start</strong>: This sets the start grid for search.</li>\n              <li><strong>Stop</strong>: This sets the stop grid for search.</li>\n              <li><strong>Block (Optional)</strong>: This sets the grid that is to be ignored during search.</li>\n\n            </ul>\n          </div>\n          <h4>3. Adjust Animation Speed (Optional)</h4>\n          <div>\n            Use the slider labeled \"Animation Time (ms)\" to set the speed of the animation. The value is in milliseconds.\n          </div>\n          <h4>4. Configure Grid Size (Optional)</h4>\n          <div>\n            Select the size of the grid from the \"GridSize\" dropdown. The available size is:\n            <ul>\n              <li><strong>20x20</strong></li>\n            </ul>\n          </div>\n          <h4>5. Start the Search</h4>\n          <div>\n            Press the \"START SEARCH\" button to begin the visualization of the selected algorithm on the grid.\n          </div>\n          <h4>6. Reset the Grid</h4>\n          <div>\n            If you want to reset the grid and start over, press the \"RESET\" button.\n          </div>\n          <h4>7. View Results</h4>\n          <div>\n            After the search is completed, the results will be displayed in the table on the right, showing the following details for each algorithm:\n            <ul>\n              <li><strong>Traversed Nodes</strong>: The number of nodes that were visited during the search.</li>\n              <li><strong>Path Length</strong>: The length of the path found by the algorithm.</li>\n            </ul>\n          </div>\n          <h4>Additional Tips</h4>\n          <div>\n            <ul>\n              <li>Ensure that you have selected an algorithm and configured the settings before starting the search.</li>\n              <li>Use the reset button if the grid or results need to be cleared before a new search.</li>\n            </ul>\n          </div>\n      </DialogContent>\n      <Button onClick={handleClose} color=\"primary\" autoFocus>\n        Close\n      </Button>\n    </Dialog>\n  );\n};\n\nexport default Instructions;\n","import React, { useState } from \"react\";\nimport Layout from \"./Layout\";\nimport Navbar from \"./Navbar\";\nimport Options from \"./Options\";\nimport Instructions from './Instructions';\n\n\nfunction Root() {\n  const algorithms = [\"BFS\", \"DFS\", \"A*\"];\n  const gridShapes = [\"20X20\", \"30X30\", \"40X40\"];\n  const gridTypes = [\"None\", \"Start\", \"Stop\", \"Block\"];\n  const animTimes = 500;\n\n  const [algorithm, setAlgorithm] = useState(null);\n  const [gridType, setGridType] = useState(null);\n  const [gridShape, setGrid] = useState(\"20X20\");\n  const [animTime, setAnim] = useState(100);\n\n  const [instructionsOpen, setInstructionsOpen] = useState(true);\n\n  const handleOpenInstructions = () => {\n    setInstructionsOpen(true);\n  };\n\n  const handleCloseInstructions = () => {\n    setInstructionsOpen(false);\n  };\n\n  return (\n    <div>\n      <Navbar handleOpenInstructions={handleOpenInstructions}/>\n      <Options\n        algorithms={algorithms}\n        gridShapes={gridShapes}\n        algorithm={algorithm}\n        setAlgorithm={setAlgorithm}\n        gridShape={gridShape}\n        gridTypes={gridTypes}\n        gridType={gridType}\n        animTimes={animTimes}\n        animTime={animTime}\n        setAnim={setAnim}\n        setGridType={setGridType}\n        setGrid={setGrid}\n      />\n\n      <Layout\n        algorithm={algorithm}\n        setAlgorithm={setAlgorithm}\n        gridType={gridType}\n        animTime={animTime}\n        gridShape={\n          gridShape.includes(\"20\")\n            ? 20\n            : gridShape.includes(\"30\")\n            ? 30\n            : gridShape.includes(\"40\")\n            ? 40\n            : \"None\"\n        }\n      />\n      <Instructions open={instructionsOpen} handleClose={handleCloseInstructions} />\n    </div>\n  );\n}\n\nexport default Root;\n","import './App.css';\nimport Root from './Components/Root';\n\nfunction App() {\n  return (\n    <div >\n      <Root />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}